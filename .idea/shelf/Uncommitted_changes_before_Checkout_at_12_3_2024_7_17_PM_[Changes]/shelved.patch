Index: src/main/java/lk/ijse/dpcommunication/controller/OrdersFormController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.dpcommunication.controller;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport lk.ijse.dpcommunication.db.DbConnection;\r\nimport lk.ijse.dpcommunication.model.*;\r\nimport lk.ijse.dpcommunication.model.tm.cartTm;\r\nimport lk.ijse.dpcommunication.repository.customerRepo;\r\nimport lk.ijse.dpcommunication.repository.itemRepo;\r\nimport lk.ijse.dpcommunication.repository.orderRepo;\r\nimport lk.ijse.dpcommunication.repository.placeOrderRepo;\r\nimport net.sf.jasperreports.engine.*;\r\nimport net.sf.jasperreports.engine.design.JasperDesign;\r\nimport net.sf.jasperreports.engine.xml.JRXmlLoader;\r\nimport net.sf.jasperreports.view.JasperViewer;\r\nimport net.sf.jasperreports.engine.JasperCompileManager;\r\nimport org.controlsfx.control.Notifications;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class OrdersFormController {\r\n\r\n    public TableColumn colDescription;\r\n    public TableColumn colCusId;\r\n    public TableColumn colQty;\r\n    public TableColumn colUnitPrice;\r\n    public TableColumn colTotal;\r\n    public TableColumn colDate;\r\n    public TableColumn colOrderId;\r\n    public Button btnViewOrders;\r\n    public Button btnNewCus;\r\n    public ComboBox cmbPaid;\r\n    public Button btnGetMoney;\r\n    @FXML\r\n    private Button btnAddToCart;\r\n\r\n    @FXML\r\n    private Button btnPlaceOrder;\r\n\r\n    @FXML\r\n    private Button btnPrintBill;\r\n\r\n    @FXML\r\n    private Button btnViewBill;\r\n\r\n    @FXML\r\n    private ComboBox<String> cmbCustomers;\r\n\r\n    @FXML\r\n    private ComboBox<String> cmbItem;\r\n\r\n    @FXML\r\n    private AnchorPane itemsPane;\r\n\r\n    @FXML\r\n    private Label lblCode;\r\n\r\n    @FXML\r\n    private Label lblDate;\r\n\r\n    @FXML\r\n    private Label lblNetTotal;\r\n\r\n    @FXML\r\n    private Label lblOrderId;\r\n\r\n    @FXML\r\n    private Label lblPrice;\r\n\r\n    @FXML\r\n    private TableView<cartTm> tblOrders;\r\n\r\n    @FXML\r\n    private TextField txtQty;\r\n\r\n    private ObservableList<cartTm> obList = FXCollections.observableArrayList();\r\n\r\n    private String[] statusList = new String[]{\"Paid\", \"Pay Later\"};\r\n\r\n    private int tempQty;\r\n\r\n    public void initialize() throws SQLException {\r\n        getItemCodes();\r\n        getCustomers();\r\n        getCurrentOrderId();\r\n        calculateNetTotal();\r\n        setCellValueFactory();\r\n        setDate();\r\n        showStatus();\r\n       // saveID();\r\n    }\r\n    public void showStatus() {\r\n        List<String> listS = new ArrayList();\r\n        String[] var2 = this.statusList;\r\n        int var3 = var2.length;\r\n\r\n        for (int var4 = 0; var4 < var3; ++var4) {\r\n            String data = var2[var4];\r\n            listS.add(data);\r\n        }\r\n\r\n        ObservableList listStatus = FXCollections.observableArrayList(listS);\r\n        this.cmbPaid.setItems(listStatus);\r\n\r\n    }\r\n\r\n    private void setCellValueFactory(){\r\n        colDate.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n        colOrderId.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\r\n        colCusId.setCellValueFactory(new PropertyValueFactory<>(\"customerId\"));\r\n        colDescription.setCellValueFactory(new PropertyValueFactory<>(\"description\"));\r\n        colQty.setCellValueFactory(new PropertyValueFactory<>(\"qty\"));\r\n        colUnitPrice.setCellValueFactory(new PropertyValueFactory<>(\"unitPrice\"));\r\n        colTotal.setCellValueFactory(new PropertyValueFactory<>(\"total\"));\r\n    }\r\n\r\n    private void getItemCodes() {\r\n        ObservableList<String> obList = FXCollections.observableArrayList();\r\n        try {\r\n            List<String> codeList = itemRepo.getCodes();\r\n\r\n            for (String code : codeList) {\r\n                obList.add(code);\r\n            }\r\n            cmbItem.setItems(obList);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    private void getCustomers(){\r\n        ObservableList<String> obList = FXCollections.observableArrayList();\r\n        try {\r\n            List<String> cusList = customerRepo.getNames();\r\n\r\n            for (String code : cusList) {\r\n                obList.add(code);\r\n            }\r\n            cmbCustomers.setItems(obList);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    private void setDate() {\r\n        LocalDate now = LocalDate.now();\r\n        lblDate.setText(String.valueOf(now));\r\n    }\r\n    private void getCurrentOrderId(){\r\n        try{\r\n            String id = orderRepo.getCurrentId();\r\n            String nextId = generateNextOrderId(id);\r\n            lblOrderId.setText(nextId);\r\n        }catch (SQLException e){\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n    private String generateNextOrderId(String id) {\r\n        if (id != null && id.startsWith(\"DP\")) {\r\n            String[] split = id.split(\"DP\");\r\n            int idNum = Integer.parseInt(split[1]);\r\n            return String.format(\"DP%03d\", ++idNum);\r\n        }\r\n        return \"DP001\";\r\n    }\r\n\r\n\r\n    @FXML\r\n    void addToCartOnAction(ActionEvent event) throws SQLException {\r\n        String date = lblDate.getText();\r\n        String orderId= lblOrderId.getText();\r\n        String cusId = cmbCustomers.getValue();\r\n        String desc = cmbItem.getValue();\r\n        int qty = Integer.parseInt(txtQty.getText());\r\n        tempQty = qty;\r\n        double unitPrice = Double.parseDouble(lblPrice.getText());\r\n        double total = qty * unitPrice;\r\n\r\n      /*  for (int i = 0; i < tblOrders.getItems().size(); i++) {\r\n            if (desc.equals(colDescription.getCellData(i))) {\r\n\r\n                cartTm tm = obList.get(i);\r\n                qty += tm.getQty();\r\n                total = qty * unitPrice;\r\n\r\n                tm.setQty(qty);\r\n                tm.setTotal(total);\r\n\r\n                tblOrders.refresh();\r\n\r\n                calculateNetTotal();\r\n                return;\r\n            }\r\n        }*/\r\n        tblOrders.refresh();\r\n        calculateNetTotal();\r\n\r\n        cartTm tm = new cartTm(date,orderId,cusId, desc, qty, unitPrice, total);\r\n        obList.add(tm);\r\n\r\n        tblOrders.setItems(obList);\r\n        calculateNetTotal();\r\n        //clearItems();\r\n        Timeline timeline = new Timeline(new KeyFrame(\r\n                Duration.seconds(2), // Delay duration\r\n                new EventHandler<ActionEvent>() {\r\n                    @Override\r\n                    public void handle(ActionEvent event) {\r\n                        txtQty.setText(\"\"); // Action to perform after the delay\r\n                    }\r\n                }\r\n        ));\r\n\r\n        timeline.setCycleCount(1); // Ensure it only runs once\r\n        timeline.play(); // Start the timeline\r\n       // txtQty.setText(\"\");\r\n        processTableValues();\r\n        //System.out.println(\"Weda meka\");\r\n//       boolean added =  orderRepo.saveCart(tm);\r\n//       if (added){\r\n//           System.out.println(\"add done\");\r\n//       }\r\n\r\n    }\r\n//    private void saveID() throws SQLException {\r\n//        String Id = lblOrderId.getText();\r\n//        OrderId orderId1 = new OrderId(Id);\r\n//       boolean saved =  orderRepo.saveID(orderId1);\r\n//       if (saved){\r\n//           System.out.println(\"Saved\");\r\n//       }\r\n//\r\n//    }\r\n    private void clearItems(){\r\n        cmbItem.setValue(\"\");\r\n        txtQty.setText(\"\");\r\n        lblPrice.setText(\"\");\r\n        lblCode.setText(\"\");\r\n\r\n    }\r\n    private void processTableValues() throws SQLException {\r\n        // Get the items from the table (assuming tblOrders is a TableView<cartTm>)\r\n        ObservableList<cartTm> items = tblOrders.getItems();\r\n\r\n        // Iterate over the items and perform operations\r\n        for (cartTm item : items) {\r\n            String date = item.getDate();\r\n            String orderId = item.getOrderId();\r\n            String customerId = item.getCustomerId();\r\n            String description = item.getDescription();\r\n            int quantity = item.getQty();\r\n            double unitPrice = item.getUnitPrice();\r\n            double total = item.getTotal();\r\n//orderRepo.saveCart();\r\n\r\n            // Perform any additional operations with these values\r\n            // For example, you might want to print them or save them to the database\r\n            System.out.println(\"Date: \" + date + \", Order ID: \" + orderId + \", Customer ID: \" + customerId +\r\n                    \", Description: \" + description + \", Quantity: \" + quantity +\r\n                    \", Unit Price: \" + unitPrice + \", Total: \" + total);\r\n        }\r\n    }\r\n\r\n\r\n    private void calculateNetTotal() {\r\n        double netTotal = 0;  // Change int to double\r\n        for (int i = 0; i < tblOrders.getItems().size(); i++) {\r\n            netTotal += (double) colTotal.getCellData(i);  // No need to cast since colTotal.getCellData(i) returns a double\r\n        }\r\n        lblNetTotal.setText(String.format(\"%.2f\", netTotal));  // Format to 2 decimal places for currency display\r\n    }\r\n\r\n\r\n    @FXML\r\n    void placeOrderOnAction(ActionEvent event) throws SQLException {\r\n        String date = lblDate.getText();\r\n        String orderId = lblOrderId.getText();\r\n        String cusId = cmbCustomers.getValue();\r\n        String desc = cmbItem.getValue();\r\n        String payment = String.valueOf(cmbPaid.getValue());\r\n        double unitPrice = Double.parseDouble(lblPrice.getText());\r\n        //System.out.println(\"Weda ne 1\");\r\n        double total = Double.parseDouble(lblNetTotal.getText());\r\n        double updatedTotal = Double.parseDouble(lblNetTotal.getText());\r\n\r\n        var order1 = new order(date, orderId, cusId, desc, tempQty, unitPrice, total,payment,updatedTotal);\r\n\r\n        List<orderDetail> odList = new ArrayList<>();\r\n\r\n        for (int i = 0; i < tblOrders.getItems().size(); i++) {\r\n            cartTm tm = obList.get(i);\r\n\r\n            orderDetail od = new orderDetail(\r\n                    orderId,\r\n                    tm.getDescription(),\r\n                    tm.getUnitPrice(),\r\n                    tm.getQty(),\r\n                    tm.getTotal()\r\n            );\r\n\r\n            odList.add(od);\r\n            System.out.println(\"Adding order detail: \" + od);\r\n        }\r\n\r\n        placeOrder po = new placeOrder(order1, odList);\r\n        System.out.println(\"Placing order: \" + order1);\r\n\r\n        try {\r\n            boolean isPlaced = placeOrderRepo.placeOrder(po);\r\n            if (isPlaced) {\r\n                showNotification(\"Confirmation\", \"Order Placed SuccessFullY !!\", Pos.BOTTOM_RIGHT, \"confirmation\");\r\n            } else {\r\n                showNotification(\"Warning\", \"Something Went Wrong !!\", Pos.BOTTOM_RIGHT, \"warning\");\r\n            }\r\n        } catch (SQLException e) {\r\n            new Alert(Alert.AlertType.ERROR, e.getMessage()).show();\r\n        }\r\n\r\n    }\r\n    private void showNotification(String title, String text, Pos position, String type) {\r\n        Notifications notification = Notifications.create()\r\n                .title(title)\r\n                .text(text)\r\n                .position(position)\r\n                .hideAfter(javafx.util.Duration.seconds(5))\r\n                .onAction(event -> {\r\n                    System.out.println(title + \" notification clicked!\");\r\n                });\r\n\r\n        // Add different styles for different types of notifications\r\n        switch (type) {\r\n            case \"confirmation\":\r\n                notification.showConfirm();\r\n                break;\r\n            case \"warning\":\r\n                notification.showWarning();\r\n                break;\r\n            // Add more cases if needed for different styles\r\n        }\r\n    }\r\n\r\n\r\n        @FXML\r\n    void printBillOnAction(ActionEvent event) throws JRException, SQLException {\r\n        JasperDesign jasperDesign = JRXmlLoader.load(\"src/main/resources/reports/dp_order.jrxml\");\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);\r\n\r\n        Map<String,Object> data = new HashMap<>();\r\n        data.put(\"Order\",lblOrderId.getText());\r\n        System.out.println(data);\r\n\r\n        JasperPrint jasperPrint =\r\n                JasperFillManager.fillReport(jasperReport, data, DbConnection.getInstance().getConnection());\r\n        //JasperViewer.viewReport(jasperPrint,true);\r\n        JasperPrintManager.printReport(jasperPrint, true);\r\n\r\n    }\r\n\r\n    @FXML\r\n    void viewBillOnAction(ActionEvent event) throws SQLException, JRException {\r\n        // Load and compile dp_order.jrxml\r\n        JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream(\"/reports/dp_order.jrxml\"));\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);\r\n\r\n        // Prepare parameters for the report\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"Order\", lblOrderId.getText());\r\n\r\n        // Fill report with data from database connection\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, data, DbConnection.getInstance().getConnection());\r\n\r\n        // View the report using JasperViewer (optional, for testing)\r\n        JasperViewer.viewReport(jasperPrint, false);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public void cmbItemOnAction(ActionEvent actionEvent) {\r\n        String desc = cmbItem.getValue();\r\n\r\n        try {\r\n            item item1 = itemRepo.searchByCode(desc);\r\n            if (item1!=null){\r\n                lblCode.setText(item1.getId());\r\n                lblPrice.setText(String.valueOf(item1.getUnitPrice()));\r\n            }\r\n            txtQty.requestFocus();\r\n        }catch (SQLException e){\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    public void viewOrdersOnAction(ActionEvent actionEvent) throws IOException {\r\n        AnchorPane Form = FXMLLoader.load(this.getClass().getResource(\"/view/ordersView_form.fxml\"));\r\n        itemsPane.getChildren().clear();\r\n        itemsPane.getChildren().add(Form);\r\n    }\r\n    public void newCustomerOnAction(ActionEvent actionEvent) throws IOException {\r\n        AnchorPane Form = FXMLLoader.load(this.getClass().getResource(\"/view/customer_form.fxml\"));\r\n        itemsPane.getChildren().clear();\r\n        itemsPane.getChildren().add(Form);\r\n\r\n    }\r\n\r\n    public void GetMoneyOnAction(ActionEvent actionEvent) throws IOException {\r\n       AnchorPane Form = FXMLLoader.load(this.getClass().getResource(\"/view/payNow_form.fxml\"));\r\n       itemsPane.getChildren().clear();\r\n       itemsPane.getChildren().add(Form);\r\n\r\n    }\r\n\r\n    public void cmbPaidOnAction(ActionEvent actionEvent) {\r\n        String selectedValue = cmbPaid.getValue().toString();\r\n        if (\"Paid\".equals(selectedValue)) {\r\n            btnGetMoney.setVisible(true); // Hide the button\r\n        } else {\r\n            btnGetMoney.setVisible(false); // Show the button\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/lk/ijse/dpcommunication/controller/OrdersFormController.java b/src/main/java/lk/ijse/dpcommunication/controller/OrdersFormController.java
--- a/src/main/java/lk/ijse/dpcommunication/controller/OrdersFormController.java	
+++ b/src/main/java/lk/ijse/dpcommunication/controller/OrdersFormController.java	
@@ -292,6 +292,7 @@
     }
 
 
+
     @FXML
     void placeOrderOnAction(ActionEvent event) throws SQLException {
         String date = lblDate.getText();
@@ -376,9 +377,21 @@
         JasperPrintManager.printReport(jasperPrint, true);
 
     }
+    private String generateNextInvoiceId(String id) {
+        if (id != null && id.startsWith("DP")) {
+            String[] split = id.split("DP");
+            int idNum = Integer.parseInt(split[1]);
+            return String.format("#DP%03d", ++idNum);
+        }
+        return "#DP001";
+    }
+
 
     @FXML
     void viewBillOnAction(ActionEvent event) throws SQLException, JRException {
+        String previousId = "DP005"; // Example of the last ID
+        String invoiceId = generateNextInvoiceId(previousId);
+
         // Load and compile dp_order.jrxml
         JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/reports/dp_order.jrxml"));
         JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
@@ -386,6 +399,7 @@
         // Prepare parameters for the report
         Map<String, Object> data = new HashMap<>();
         data.put("Order", lblOrderId.getText());
+        data.put("InvoiceID", invoiceId);
 
         // Fill report with data from database connection
         JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, data, DbConnection.getInstance().getConnection());
Index: src/main/java/lk/ijse/dpcommunication/controller/PayLaterCustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lk.ijse.dpcommunication.controller;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport lk.ijse.dpcommunication.db.DbConnection;\r\nimport lk.ijse.dpcommunication.model.PayLaterDTO;\r\nimport lk.ijse.dpcommunication.model.PayLaterFinancialDTO;\r\nimport lk.ijse.dpcommunication.model.tm.cartTm;\r\nimport lk.ijse.dpcommunication.repository.FinancialRepo;\r\nimport lk.ijse.dpcommunication.repository.customerRepo;\r\nimport net.adeonatech.dto.SendTextBody;\r\nimport net.adeonatech.dto.TokenBody;\r\nimport net.adeonatech.dto.TransactionBody;\r\nimport net.adeonatech.service.SendSMSImpl;\r\nimport net.sf.jasperreports.engine.*;\r\nimport net.sf.jasperreports.engine.design.JasperDesign;\r\nimport net.sf.jasperreports.engine.xml.JRXmlLoader;\r\nimport net.sf.jasperreports.view.JasperViewer;\r\nimport org.controlsfx.control.Notifications;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class PayLaterCustomerController {\r\n\r\n    @FXML\r\n    private Button btnBack;\r\n\r\n    @FXML\r\n    private Button btnBill;\r\n\r\n    @FXML\r\n    private Button btnUpdate;\r\n\r\n    @FXML\r\n    private ComboBox<String> cmbCustomer;\r\n\r\n    @FXML\r\n    private ComboBox<?> cmbStatus;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colCustomer;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colDate;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colItem;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colOrder;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colPayment;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colQty;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colTotal;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colUnitPrice;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colUpdatedTot;\r\n\r\n    @FXML\r\n    private AnchorPane financialPane;\r\n\r\n    @FXML\r\n    private Label lblArrears;\r\n\r\n    @FXML\r\n    private Label lblBalance;\r\n\r\n    @FXML\r\n    private Label lblDate;\r\n\r\n    @FXML\r\n    private TableView<PayLaterFinancialDTO> tblInstancePay;\r\n\r\n    @FXML\r\n    private TextField txtReceivedMoney;\r\n    private String customerMobileNumber;\r\n    private String[] statusList = new String[]{\"Complete\", \"Incomplete\"};\r\n\r\n\r\n    @FXML\r\n    void GenarateBillOnAction(ActionEvent event) throws JRException, SQLException {\r\n        JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream(\"/reports/DP_PAYLATER.jrxml\"));\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);\r\n\r\n        // Prepare parameters for the report\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"customerName\", cmbCustomer.getValue());\r\n\r\n        // Fill report with data from database connection\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, data, DbConnection.getInstance().getConnection());\r\n\r\n        // View the report using JasperViewer (optional, for testing)\r\n        JasperViewer.viewReport(jasperPrint, false);\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void backOnAction(ActionEvent event) throws IOException {\r\n        AnchorPane Form = FXMLLoader.load(this.getClass().getResource(\"/view/financialChoose_form.fxml\"));\r\n        financialPane.getChildren().clear();\r\n        financialPane.getChildren().add(Form);\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void cmbCustomerOnAction(ActionEvent event) throws SQLException {\r\n        setTable();\r\n        setBalance();\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void updateDatabaseOnAction(ActionEvent event) throws SQLException, IOException {\r\n        ObservableList<PayLaterFinancialDTO> items = tblInstancePay.getItems();\r\n        String date = null;\r\n        String orderId = null;\r\n        String customerId =null;\r\n        String description = null;\r\n        double quantity = 0;\r\n        double unitPrice = 0;\r\n        double total = 0;\r\n        String payment = null;\r\n        double updatedTot= 0;\r\n\r\n\r\n        for (PayLaterFinancialDTO item : items) {\r\n             date = item.getDate();\r\n             orderId = item.getOrder_id();\r\n             customerId = item.getCustomer_name();\r\n             description = item.getItem_name();\r\n             quantity = item.getQty();\r\n             unitPrice = item.getUnit_price();\r\n             total = item.getTotal();\r\n             payment =item.getPayment();\r\n             updatedTot = item.getUpdated_total();\r\n\r\n            }\r\n        double receivedMoney = Double.parseDouble(txtReceivedMoney.getText());\r\n        double arrears = Double.parseDouble(lblArrears.getText());\r\n        PayLaterDTO payLaterDTO = new PayLaterDTO(date,orderId,customerId,description,quantity,unitPrice,total,payment,receivedMoney,arrears,updatedTot);\r\n\r\n        try {\r\n            boolean isSaved = FinancialRepo.savePayLater(payLaterDTO);\r\n            if (isSaved) {\r\n                showNotification(\"Confirmation\", \"DataBase Updated Successfully  !!\", Pos.BOTTOM_RIGHT, \"confirmation\");\r\n                sendMessage();\r\n            } else {\r\n                showNotification(\"Warning\", \"Something Went Wrong !!\", Pos.BOTTOM_RIGHT, \"warning\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n    public void initialize() throws SQLException {\r\n        setDate();\r\n        setCellValueFactory();\r\n        getCustomers();\r\n        showStatus();\r\n    }\r\n    private void setCellValueFactory(){\r\n        colDate.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n        colOrder.setCellValueFactory(new PropertyValueFactory<>(\"order_id\"));\r\n        colCustomer.setCellValueFactory(new PropertyValueFactory<>(\"customer_name\"));\r\n        colItem.setCellValueFactory(new PropertyValueFactory<>(\"item_name\"));\r\n        colQty.setCellValueFactory(new PropertyValueFactory<>(\"qty\"));\r\n        colUnitPrice.setCellValueFactory(new PropertyValueFactory<>(\"unit_price\"));\r\n        colTotal.setCellValueFactory(new PropertyValueFactory<>(\"total\"));\r\n        colPayment.setCellValueFactory(new PropertyValueFactory<>(\"payment\"));\r\n        colUpdatedTot.setCellValueFactory(new PropertyValueFactory<>(\"updated_total\"));\r\n    }\r\n    private void setDate(){\r\n        LocalDate now = LocalDate.now();\r\n        lblDate.setText(String.valueOf(now));\r\n    }\r\n    private void getCustomers(){\r\n        ObservableList<String> obList = FXCollections.observableArrayList();\r\n        try {\r\n            List<String> cusList = customerRepo.getNames();\r\n\r\n            for (String code : cusList) {\r\n                obList.add(code);\r\n            }\r\n            cmbCustomer.setItems(obList);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    private void showNotification(String title, String text, Pos position, String type) {\r\n        Notifications notification = Notifications.create()\r\n                .title(title)\r\n                .text(text)\r\n                .position(position)\r\n                .hideAfter(javafx.util.Duration.seconds(5))\r\n                .onAction(event -> System.out.println(title + \" notification clicked!\"));\r\n\r\n        if (\"confirmation\".equals(type)) {\r\n            notification.darkStyle();\r\n        } else if (\"warning\".equals(type)) {\r\n            notification.showWarning();\r\n        }\r\n\r\n        notification.show();\r\n    }\r\n\r\n    private void setTable() throws SQLException {\r\n        String name = String.valueOf(cmbCustomer.getValue());\r\n        System.out.println(name);\r\n        List<PayLaterFinancialDTO> o1 = FinancialRepo.getPayLaterViaCustomer(name);\r\n        System.out.println(o1);\r\n\r\n        tblInstancePay.getItems().clear();\r\n\r\n        if (o1 != null) {\r\n            tblInstancePay.getItems().addAll(o1);\r\n        }\r\n    }\r\n    private void setBalance() throws SQLException {\r\n        String name = String.valueOf(cmbCustomer.getValue());\r\n        double balance = FinancialRepo.getCustomerBalance(name);\r\n        lblBalance.setText(String.valueOf(balance));\r\n    }\r\n    public void showStatus() {\r\n        List<String> listS = new ArrayList();\r\n        String[] var2 = this.statusList;\r\n        int var3 = var2.length;\r\n\r\n        for (int var4 = 0; var4 < var3; ++var4) {\r\n            String data = var2[var4];\r\n            listS.add(data);\r\n        }\r\n\r\n        ObservableList listStatus = FXCollections.observableArrayList(listS);\r\n        this.cmbStatus.setItems(listStatus);\r\n\r\n    }\r\n    public void calculateArrearsOnAction() {\r\n        String SreceivedMoney = txtReceivedMoney.getText();\r\n        String SorderCost = lblBalance.getText();\r\n\r\n        double receivedMoney = Double.parseDouble(SreceivedMoney);\r\n        double orderCost = Double.parseDouble(SorderCost);\r\n\r\n        double arrears = orderCost - receivedMoney;\r\n        lblArrears.setText(String.valueOf(arrears));\r\n\r\n    }\r\n    public void sendMessage() throws IOException, SQLException {\r\n        TokenBody tokenBody = new TokenBody();\r\n\r\n        tokenBody.setUsername(\"gayashanb\");\r\n        tokenBody.setPassword(\"2001@Dhananka\");\r\n\r\n        SendSMSImpl SMS = new SendSMSImpl();\r\n        String token = SMS.getToken(tokenBody).getToken();\r\n        System.out.println(token);\r\n\r\n        SendSMSImpl sendSMS = new SendSMSImpl();\r\n        SendTextBody sendTextBody = new SendTextBody();\r\n        getCustomerMobile();\r\n        sendTextBody.setMsisdn(sendSMS.setMsisdns(new String[]{customerMobileNumber}));\r\n        sendTextBody.setSourceAddress(\"DP Communi\");\r\n        System.out.println(\"Working\");\r\n        sendTextBody.setMessage(\"Dear Sir/Madam ,\\n\" +\r\n                \"\\n\" +\r\n                \"Your Payment LKR\" + \" \" + txtReceivedMoney.getText() + \" Successfully Received on \" + lblDate.getText() +\".\"+ \"Your Total Payable Amount LKR \" +\" \"+ lblArrears.getText() + \"\\n\" +\r\n                \"\\n\" +\r\n                \"Questions? Contact us at 0713856863.\\n\" +\r\n                \"\\n\" +\r\n                \"Thanks for shopping with us!\\n\" +\r\n                \"\\n\" +\r\n                \"Best,\\n\" +\r\n                \"DP Communication\\n\" +\r\n                \"The Golden Mark Of Printing Art\");\r\n        long transactionId = generateUniqueTransactionId();\r\n        sendTextBody.setTransaction_id(String.valueOf(transactionId));\r\n        System.out.println(transactionId);\r\n        TransactionBody transactionBody = new TransactionBody();\r\n        transactionBody.setTransaction_id(String.valueOf(transactionId));\r\n        String response = sendSMS.sendText(sendTextBody,\r\n                sendSMS.getToken(tokenBody).getToken()).getStatus();\r\n        switch (response) {\r\n            case \"success\":\r\n                showNotification(\"Confirmation\", \"Messsage Sent Successfully !!\", Pos.BOTTOM_RIGHT, \"confirmation\");\r\n                break;\r\n\r\n            case \"failure\":\r\n                showNotification(\"Warning\", \"Something Went Wrong !!\", Pos.BOTTOM_RIGHT, \"warning\");\r\n                break;\r\n        }\r\n\r\n    }\r\n    private static long generateUniqueTransactionId() {\r\n        // Using current time in milliseconds for unique transaction ID\r\n        return System.currentTimeMillis();\r\n    }\r\n\r\n    private void getCustomerMobile() throws SQLException {\r\n        String name = cmbCustomer.getValue();\r\n        String mobile = customerRepo.getMobile(name);\r\n        this.customerMobileNumber = mobile;\r\n        System.out.println(customerMobileNumber);\r\n    }\r\n\r\n    public void getStatusOnAction(ActionEvent actionEvent) {\r\n        calculateArrearsOnAction();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/lk/ijse/dpcommunication/controller/PayLaterCustomerController.java b/src/main/java/lk/ijse/dpcommunication/controller/PayLaterCustomerController.java
--- a/src/main/java/lk/ijse/dpcommunication/controller/PayLaterCustomerController.java	
+++ b/src/main/java/lk/ijse/dpcommunication/controller/PayLaterCustomerController.java	
@@ -33,6 +33,7 @@
 import java.io.IOException;
 import java.sql.SQLException;
 import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -40,6 +41,8 @@
 
 public class PayLaterCustomerController {
 
+    private String lastInvoiceId = null;
+
     @FXML
     private Button btnBack;
 
@@ -102,15 +105,40 @@
     private String customerMobileNumber;
     private String[] statusList = new String[]{"Complete", "Incomplete"};
 
+   /* private String generateNextInvoiceId(String id) {
+        if (id != null && id.startsWith("DP")) {
+            String[] split = id.split("DP");
+            int idNum = Integer.parseInt(split[1]);
+            return String.format("DP%03d", ++idNum);
+        }
+        return "DP001";
+    }*/
+
+
+    private String generateNextInvoiceId(String id) {
+        if (id != null && id.startsWith("DP")) {
+            String[] split = id.split("DP");
+            int idNum = Integer.parseInt(split[1]);
+            return String.format("DP%03d", ++idNum);
+        }
+        return "DP001"; // Start with DP001 if no ID exists
+    }
+
 
     @FXML
     void GenarateBillOnAction(ActionEvent event) throws JRException, SQLException {
-        JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/reports/DP_PAYLATER.jrxml"));
+/*
+        String previousId = "DP005"; // Example of the last ID
+        String invoiceId = generateNextInvoiceId(previousId);
+
+        JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/reports/Pay_Later_DP.jrxml"));
         JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
 
         // Prepare parameters for the report
         Map<String, Object> data = new HashMap<>();
         data.put("customerName", cmbCustomer.getValue());
+        data.put("InvoiceID", invoiceId);
+
 
         // Fill report with data from database connection
         JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, data, DbConnection.getInstance().getConnection());
@@ -118,6 +146,49 @@
         // View the report using JasperViewer (optional, for testing)
         JasperViewer.viewReport(jasperPrint, false);
 
+*/
+
+
+        try {
+           /* // Generate the invoice ID
+            String previousId = "DP000"; // Example of the last ID
+            String invoiceId = generateNextInvoiceId(previousId);
+            System.out.println("idftrd"+invoiceId);
+*/
+            String nextInvoiceId = generateNextInvoiceId(lastInvoiceId);
+            lastInvoiceId = nextInvoiceId; // Update the last invoice ID
+            System.out.println("Generated Invoice ID: " + nextInvoiceId);
+            // Add logic to use the generated invoice ID, such as setting it on the UI or saving it
+
+
+            // Current date
+            LocalDate todayDate = LocalDate.now();
+
+            // Convert LocalDate to String
+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // Change format as needed
+            String formattedDate = todayDate.format(formatter);
+
+            JasperDesign jasperDesign = JRXmlLoader.load(getClass().getResourceAsStream("/reports/Pay_Later_DP.jrxml"));
+            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
+
+
+            // Pass parameters
+            Map<String, Object> parameters = new HashMap<>();
+            parameters.put("customerName", cmbCustomer.getValue());
+            parameters.put("InvoiceID", nextInvoiceId);
+            parameters.put("Today", formattedDate);
+
+            // Fill the report
+            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, DbConnection.getInstance().getConnection());
+
+
+            // View the report
+            JasperViewer.viewReport(jasperPrint, false);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
 
     }
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"workspaceImportForciblyTurnedOn\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -9,7 +9,7 @@
     </option>
     <option name="workspaceImportForciblyTurnedOn" value="true" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-22" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
